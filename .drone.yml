---

kind: pipeline
type: docker
name: default

environment:
  POSTGRES_HOST: postgis-1
  POSTGRES_PORT: '5432'
  DATASTORE_DATABASE: ingest-tests
  DATASTORE_USER: tester1
  GEOSERVER_HOST: geoserver-1
  GEOSERVER_PORT: '8080'
  GEOSERVER_WORKSPACE: work_1
  GEOSERVER_STORE: postgis-1
  GEOSERVER_USER: tester1

#
# Steps
#

steps:

- name: setup-postgis
  image: postgres:9.6-alpine
  when:
    event:
    - push
    - tag
  environment:
    POSTGRES_PASSWORD:
      from_secret: postgres_password
    DATASTORE_PASSWORD:
      from_secret: postgres_test_password
  commands:
  # Wait for database server to be ready
  - export PGHOST=$${POSTGRES_HOST} PGPORT=$${POSTGRES_PORT}
  - (t=30; while ! pg_isready -U postgres -t 5; do t=$((t - 1)); test $${t} -ne 0; sleep 3s; done)
  # Setup client 
  - touch ~/.pgpass
  - chmod og-rwx ~/.pgpass
  - echo "$${POSTGRES_HOST}:$${POSTGRES_PORT}:*:postgres:$${POSTGRES_PASSWORD}" >> ~/.pgpass
  - echo "$${POSTGRES_HOST}:$${POSTGRES_PORT}:*:$${DATASTORE_USER}:$${DATASTORE_PASSWORD}" >> ~/.pgpass
  # Create user/database for tests
  - echo "CREATE USER \"$${DATASTORE_USER}\" WITH PASSWORD '$${DATASTORE_PASSWORD}'" | psql -U postgres
  - echo "CREATE DATABASE \"$${DATASTORE_DATABASE}\" WITH OWNER \"$${DATASTORE_USER}\"" | psql -U postgres
  - echo "CREATE EXTENSION postgis" | psql -U postgres $${DATASTORE_DATABASE}
  - psql -U postgres -l -A -t
  - psql -U $${DATASTORE_USER} -d $${DATASTORE_DATABASE} -A -t -c '\d'

- name: setup-geoserver
  image: curlimages/curl:7.75.0
  when:
    event:
    - push
    - tag
  environment:
    GEOSERVER_PASSWORD:
      from_secret: geoserver_test_password
    GEOSERVER_ADMIN_PASSWORD:
      from_secret: geoserver_admin_password
    DATASTORE_PASSWORD:
      from_secret: postgres_test_password
  commands:
  - export GEOSERVER_URL=http://$${GEOSERVER_HOST}:$${GEOSERVER_PORT}/geoserver
  - echo "machine $${GEOSERVER_HOST} login admin password $${GEOSERVER_ADMIN_PASSWORD}" > ~/.netrc
  - chmod u=rw,g=,o= ~/.netrc
  - (t=30; sleep 20s; while ! curl -s -S -I $${GEOSERVER_URL}; do t=$((t - 1)); test $${t} -ne 0; sleep 3s; done)
  - curl -s -S --netrc $${GEOSERVER_URL}/rest/about/version.xml | tee && echo
  - curl -s -S --netrc $${GEOSERVER_URL}/rest/about/system-status.xml | tee && echo
  - ./bin/geoserver-create-workspace.sh
  - ./bin/geoserver-setup-datastore.sh
  - curl -s -S --netrc $${GEOSERVER_URL}/rest/workspaces/$${GEOSERVER_WORKSPACE}/datastores.xml | tee && echo
  - ./bin/geoserver-create-user-in-admin-group.sh
  - curl -s -S --netrc $${GEOSERVER_URL}/rest/security/roles/user/$${GEOSERVER_USER}.xml | tee && echo
  - ./bin/geoserver-grant-rest-access-to-admin-group.sh
  - curl -s -S --netrc $${GEOSERVER_URL}/rest/security/acl/rest.xml | tee && echo

- name: nosetests
  image: docker:19.03-dind
  when:
    event:
    - push
    - tag
  volumes:
  - name: docker_socket
    path: /var/run
  environment:
    DOCKER_HOST: unix:///var/run/docker.sock
    DATASTORE_PASSWORD:
      from_secret: postgres_test_password
    GEOSERVER_PASSWORD:
      from_secret: geoserver_test_password
  commands:
  # Build image for testing
  - export image=opertusmundi/ingest:${DRONE_COMMIT}-testing
  - (t=10; while ! docker info -f '{{.ID}}' 2>/dev/null; do t=$((t - 1)); test $${t} -ne 0; sleep 1s; done)
  - docker build . -f testing.dockerfile --build-arg VERSION=${DRONE_COMMIT} -t $${image}
  # Prepare environment for tests
  - mkdir -v data temp && chown -v 1000:1000 data temp 
  - export env_file=nosetests-${CI_BUILD_NUMBER}.env
  - >-
    (env -i 
    DATABASE=/work/data/ingest-tests.sqlite
    TEMP_DIR=/work/temp
    INPUT_DIR=/work/tests/test_data
    INSTANCE_PATH=/work/data
    POSTGIS_HOST=$${POSTGRES_HOST}
    POSTGIS_PORT=$${POSTGRES_PORT}
    POSTGIS_USER=$${DATASTORE_USER}
    POSTGIS_PASS=$${DATASTORE_PASSWORD}
    POSTGIS_DB_NAME=$${DATASTORE_DATABASE}
    POSTGIS_DB_SCHEMA=public
    GEOSERVER_URL=http://$${GEOSERVER_HOST}:$${GEOSERVER_PORT}/geoserver
    GEOSERVER_USER=$${GEOSERVER_USER}
    GEOSERVER_PASS=$${GEOSERVER_PASSWORD}
    GEOSERVER_WORKSPACE=$${GEOSERVER_WORKSPACE}
    GEOSERVER_STORE=$${GEOSERVER_STORE}
    ) | tee $${env_file}
  # Run tests
  - docker run --rm -u 1000:1000 -v $PWD:/work -w /work --env-file $${env_file} --network host $${image} -v -s

- name: prepare-tags
  image: busybox:1.32
  when:
    event:
    - tag
  commands:
  - tags_file=$(mktemp) 
  - echo ${DRONE_TAG} >> $${tags_file}
  - echo ${DRONE_TAG} | grep -o -e '^[0-9]\+[.][0-9]\+[.][0-9]\+' >> $${tags_file}
  - cat $${tags_file} | xargs echo | tr '[:blank:]' ',' | tr -d '\n' | tee .tags && echo

- name: publish-image-1
  image: plugins/docker
  when:
    event:
    - tag
  settings:
    debug: true
    username: 
      from_secret: docker_username
    password:
      from_secret: docker_password
    repo: opertusmundi/ingest
    mirror: http://registry-mirror:5000
    build_args:
    - VERSION=${DRONE_TAG}

- name: publish-image-2
  image: plugins/docker
  when:
    event:
    - tag
  settings:
    debug: true
    username: 
      from_secret: registry_username
    password:
      from_secret: registry_password
    repo: registry-dev-1-opertusmundi:30474/opertusmundi/ingest
    mirror: http://registry-mirror:5000
    registry: registry-dev-1-opertusmundi:30474
    build_args:
    - VERSION=${DRONE_TAG}


#
# Services
#

services:

- name: docker
  image: docker:19.03-dind
  privileged: true
  command:
  - --registry-mirror=http://registry-mirror:5000 
  volumes:
  - name: docker_socket
    path: /var/run

- name: postgis-1
  image: postgis/postgis:9.6-2.5-alpine
  environment:
    POSTGRES_PASSWORD:
      from_secret: postgres_password

- name: geoserver-1
  image: kartoza/geoserver:2.18.0
  environment:
    #GEOSERVER_DATA_DIR: /var/lib/geoserver/data
    #GEOWEBCACHE_CACHE_DIR: /var/lib/geoserver/geowebcache-data
    GEOSERVER_ADMIN_USER: admin
    GEOSERVER_ADMIN_PASSWORD:
      from_secret: geoserver_admin_password
    INITIAL_MEMORY: '512M'
    MAXIMUM_MEMORY: '2G'

#
# Volumes
#

volumes:
- name: docker_socket
  temp: {}
