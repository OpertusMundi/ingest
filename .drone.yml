---

kind: pipeline
type: docker
name: default

environment:
  POSTGRES_HOST: 'postgis-1'
  POSTGRES_PORT: '5432'
  POSTGRES_TEST_DATABASE: ingest-tests
  POSTGRES_TEST_USER: tester1
  GEOSERVER_URL: 'http://geoserver-1'
  GEOSERVER_WORKSPACE: 'default'
  GEOSERVER_STORE: 'postgis-1'
  GEOSERVER_TEST_USER: tester1

#
# Steps
#

steps:

- name: setup-database
  image: postgres:9.6-alpine
  when:
    event:
    - push
    - tag
  environment:
    POSTGRES_PASSWORD:
      from_secret: postgres_password
    POSTGRES_TEST_PASSWORD:
      from_secret: postgres_test_password
  commands:
  # Wait for database server to be ready
  - export PGHOST=$${POSTGRES_HOST} PGPORT=$${POSTGRES_PORT}
  - (t=20; while ! pg_isready -U postgres -t 5; do t=$((t - 1)); test $${t} -ne 0; sleep 1; done)
  # Setup client 
  - touch ~/.pgpass
  - chmod og-rwx ~/.pgpass
  - echo "$${POSTGRES_HOST}:$${POSTGRES_PORT}:*:postgres:$${POSTGRES_PASSWORD}" >> ~/.pgpass
  - echo "$${POSTGRES_HOST}:$${POSTGRES_PORT}:*:$${POSTGRES_TEST_USER}:$${POSTGRES_TEST_PASSWORD}" >> ~/.pgpass
  # Create user/database for tests
  - echo "CREATE USER \"$${POSTGRES_TEST_USER}\" WITH PASSWORD '$${POSTGRES_TEST_PASSWORD}'" | psql -U postgres
  - echo "CREATE DATABASE \"$${POSTGRES_TEST_DATABASE}\" WITH OWNER \"$${POSTGRES_TEST_USER}\"" | psql -U postgres
  - echo "CREATE EXTENSION postgis" | psql -U postgres $${POSTGRES_TEST_DATABASE}
  - psql -U postgres -l -A -t
  - psql -U $${POSTGRES_TEST_USER} -d $${POSTGRES_TEST_DATABASE} -A -t -c '\d'

- name: nosetests
  image: docker:19.03-dind
  when:
    event:
    - push
    - tag
  volumes:
  - name: docker_socket
    path: /var/run
  environment:
    DOCKER_HOST: unix:///var/run/docker.sock
    POSTGRES_TEST_PASSWORD:
      from_secret: postgres_test_password
    GEOSERVER_TEST_PASSWORD:
      from_secret: geoserver_test_password
  commands:
  # Build image for testing
  - export image=opertusmundi/ingest:${DRONE_COMMIT}-testing
  - (t=10; while ! docker info -f '{{.ID}}' 2>/dev/null; do t=$((t - 1)); test $${t} -ne 0; sleep 1; done)
  - docker build . -f testing.dockerfile --build-arg VERSION=${DRONE_COMMIT} -t $${image}
  # Prepare environment for tests
  - export env_file=nosetests-${CI_BUILD_NUMBER}.env
  - >-
    (env -i 
    DATABASE=./ingest-tests.sqlite
    POSTGIS_HOST=$${POSTGRES_HOST}
    POSTGIS_PORT=$${POSTGRES_PORT}
    POSTGIS_USER=$${POSTGRES_TEST_USER}
    POSTGIS_PASS=$${POSTGRES_TEST_PASSWORD}
    POSTGIS_DB_NAME=$${POSTGRES_TEST_DATABASE}
    POSTGIS_DB_SCHEMA=public
    GEOSERVER_URL=$${GEOSERVER_URL}
    GEOSERVER_USER=$${GEOSERVER_TEST_USER}
    GEOSERVER_PASS=$${GEOSERVER_TEST_PASSWORD}
    GEOSERVER_WORKSPACE=$${GEOSERVER_WORKSPACE}
    GEOSERVER_STORE=$${GEOSERVER_STORE}
    ) | tee $${env_file}
  # Run tests
  - export postgres_server_address=$(getent ahostsv4 $${POSTGRES_HOST} | awk '/\<STREAM\>/{print $1}' | head -n 1)
  - test -n "$${postgres_server_address}"
  - >-
    docker run --rm -u 1000:1000 --volume $PWD:/work --workdir /work --env-file $${env_file} 
    --add-host $${POSTGRES_HOST}:$${postgres_server_address}
    $${image} nosetests -v -s

#
# Services
#

services:

- name: docker
  image: docker:19.03-dind
  privileged: true
  volumes:
  - name: docker_socket
    path: /var/run

- name: postgis-1
  image: postgis/postgis:9.6-2.5-alpine
  environment:
    POSTGRES_PASSWORD:
      from_secret: postgres_password

#
# Volumes
#

volumes:
- name: docker_socket
  temp: {}

