{"externalDocs":{"description":"GitHub","url":"https://github.com/OpertusMundi/ingest"},"info":{"contact":{"email":"pmitropoulos@getmap.gr"},"description":"A simple service to ingest a KML or ShapeFile into a PostGIS capable PostgreSQL database and publish an associated layer to GeoServer.","title":"Ingest/Publish API","version":"0.1.0"},"openapi":"3.0.2","paths":{"/_health":{"get":{"description":"Get health status","operationId":"getHealth","responses":{"default":{"content":{"application/json":{"examples":{"example-1":{"status":"OK"}},"schema":{"properties":{"detail":{"description":"more details on this failure (if failed)","type":"string"},"reason":{"description":"the reason of failure (if failed)","type":"string"},"status":{"description":"A status of 'OK' or 'FAILED'","type":"string"}},"type":"object"}}},"description":"An object with status information"}},"summary":"Get health status","tags":["Health"]}},"/ingest":{"post":{"parameters":[{"description":"Associates the request with an Idempotency Key (it has to be unique).","in":"header","name":"X-Idempotency-Key","required":false,"schema":{"format":"uuid","type":"string"}}],"requestBody":{"content":{"application/x-www-form-urlencoded":{"schema":{"properties":{"resource":{"description":"The vector file resolvable path.","type":"string"},"response":{"default":"prompt","description":"Determines whether the proccess should be promptly initiated (*prompt*) or queued (*deferred*). In the first case,the response waits for the result,in the second the response is immediate returning a ticket corresponding to the request.","enum":["prompt","deferred"],"type":"string"},"schema":{"description":"The schema in which the table will be created (schema has to exist). If not given,the default schema will be used.","type":"string"},"tablename":{"description":"The name of the table into which the data will be ingested (it should be a new table). By default,a unique random name will be given to a new table.","type":"string"}},"required":["resource"],"type":"object"}},"multipart/form-data":{"schema":{"properties":{"resource":{"description":"The vector file.","format":"binary","type":"string"},"response":{"default":"prompt","description":"Determines whether the proccess should be promptly initiated (*prompt*) or queued (*deferred*). In the first case,the response waits for the result,in the second the response is immediate returning a ticket corresponding to the request.","enum":["prompt","deferred"],"type":"string"},"schema":{"description":"The schema in which the table will be created (it has to exist). If not given,the default schema will be used.","type":"string"},"tablename":{"description":"The name of the table into which the data will be ingested (it should be a new table). By default,a unique random name will be given to the new table.","type":"string"}},"required":["resource"],"type":"object"}}},"required":true},"responses":{"200":{"content":{"application/json":{"schema":{"properties":{"length":{"description":"The number of features stored in the table.","type":"integer"},"schema":{"description":"The schema of the created table.","type":"string"},"table":{"description":"The name of the created table.","type":"string"},"type":{"description":"The response type as requested.","type":"string"}},"type":"object"}}},"description":"Ingestion / publication completed."},"202":{"content":{"application/json":{"schema":{"properties":{"status":{"description":"The *status* endpoint to poll for the status of the request.","type":"string"},"ticket":{"description":"The ticket corresponding to the request.","type":"string"},"type":{"description":"The response type as requested.","type":"string"}},"type":"object"}}},"description":"Accepted for processing,but ingestion/publish has not been completed.","links":{"GetStatus":{"description":"The `ticket` value returned in the response can be used as the `ticket` parameter in `GET /status/{ticket}`.","operationId":"getStatus","parameters":{"ticket":"$response.body#/ticket"}}}},"400":{"description":"General client error or database schema does not exist."},"403":{"description":"Insufficient privilege for writing in the database schema."}},"summary":"Ingest a vector file (Shapefile/KML) into PostGIS.","tags":["Ingest"]}},"/publish":{"post":{"parameters":[{"in":"header","name":"X-Idempotency-Key","required":false,"schema":{"format":"uuid","type":"string"}}],"requestBody":{"content":{"application/x-www-form-urlencoded":{"schema":{"properties":{"schema":{"description":"The database schema in which the table exists.","type":"string"},"table":{"description":"The table name.","type":"string"},"workspace":{"description":"The GeoServer workspace in which the layer will be published (it will be created if does not exist). If not given,the default workspace will be used.","type":"string"}},"required":["table"],"type":"object"}}},"required":true},"responses":{"200":{"content":{"application/json":{"schema":{"properties":{"wfs":{"description":"WFS endpoint","type":"string"},"wms":{"description":"WMS endpoint","type":"string"}},"type":"object"}}},"description":"Publication completed."},"400":{"description":"General client error or table does not exist."},"403":{"description":"Layer already published."}},"summary":"Publishes a layer to GeoServer from PostGIS table.","tags":["Publish"]}},"/result/{ticket}":{"get":{"description":"Returns the table in PostGIS resulted from a ingestion request corresponding to a specific ticket.","parameters":[{"description":"The ticket of the request","in":"path","name":"ticket","required":true,"schema":{"type":"string"}}],"responses":{"200":{"content":{"application/json":{"schema":{"properties":{"length":{"description":"The number of features stored in the table.","type":"integer"},"schema":{"description":"The schema of the created table.","type":"string"},"table":{"description":"The name of the created table.","type":"string"}},"type":"object"}}},"description":"The resulted endpoints."},"404":{"description":"Ticket not found or ingest has not been completed."}},"summary":"Get the result of the ingest.","tags":["Result"]}},"/status/{ticket}":{"get":{"description":"Returns the status of a request corresponding to a specific ticket.","operationId":"getStatus","parameters":[{"description":"The ticket of the request","in":"path","name":"ticket","required":true,"schema":{"type":"string"}}],"responses":{"200":{"content":{"application/json":{"schema":{"properties":{"comment":{"description":"If ingestion/publication has failed,a short comment describing the reason.","type":"string"},"completed":{"description":"Whether ingestion/publication process has been completed or not.","type":"boolean"},"executionTime":{"description":"The execution time in seconds.","type":"integer"},"requested":{"description":"The timestamp of the request.","format":"datetime","type":"string"},"success":{"description":"Whether the process completed succesfully.","type":"boolean"}},"type":"object"}}},"description":"Ticket found and status returned."},"404":{"description":"Ticket not found."}},"summary":"Get the status of a request.","tags":["Status"]}},"/ticket_by_key/{key}":{"get":{"parameters":[{"description":"The idempotent key as sent in X-Idempotency-Key header.","in":"path","name":"key","required":true,"schema":{"type":"string"}}],"responses":{"200":{"content":{"application/json":{"schema":{"properties":{"request":{"description":"The request of this ticket.","enum":["ingest","publish"],"type":"string"},"ticket":{"description":"The associated ticket.","type":"string"}},"type":"object"}}},"description":"The associated request and ticket."},"404":{"description":"Idempotent key not found."}},"summary":"Returns a request ticket associated with an idempotent key.","tags":["Ticket"]}}}}