{"info":{"description":"A microservice to ingest geospatial (KML/Shapefile/CSV) resource into a PostGIS database and then publish an associated layer to GeoServer.","contact":{"email":"pmitropoulos@getmap.gr"},"title":"Ingest/Publish API","version":"0.2.1"},"externalDocs":{"description":"GitHub","url":"https://github.com/OpertusMundi/ingest"},"paths":{"/ingest":{"post":{"summary":"Ingest a vector file (Shapefile/KML) into PostGIS.","tags":["Ingest"],"parameters":[{"in":"header","name":"X-Idempotency-Key","description":"Associates the request with an Idempotency Key (it has to be unique).","schema":{"type":"string","format":"uuid"},"required":false}],"requestBody":{"required":true,"content":{"multipart/form-data":{"schema":{"type":"object","properties":{"resource":{"type":"string","format":"binary","description":"The vector file."},"response":{"type":"string","enum":["prompt","deferred"],"default":"prompt","description":"Determines whether the proccess should be promptly initiated (*prompt*) or queued (*deferred*). In the first case, the response waits for the result, in the second the response is immediate returning a ticket corresponding to the request."},"table":{"type":"string","description":"The name of the (new) table into which the data will be ingested"},"workspace":{"type":"string","description":"The workspace determines the database schema"},"shard":{"type":"string","description":"The shard identifier (if any)"},"replace":{"type":"boolean","description":"If true and table already exists, data will replace existing data","default":false},"encoding":{"type":"string","description":"File encoding."},"crs":{"type":"string","description":"CRS of the dataset."}},"required":["resource","table","workspace"]}},"application/x-www-form-urlencoded":{"schema":{"type":"object","properties":{"resource":{"type":"string","description":"The vector file resolvable path."},"response":{"type":"string","enum":["prompt","deferred"],"default":"prompt","description":"Determines whether the proccess should be promptly initiated (*prompt*) or queued (*deferred*). In the first case, the response waits for the result, in the second the response is immediate returning a ticket corresponding to the request."},"table":{"type":"string","description":"The name of the (new) table into which the data will be ingested"},"workspace":{"type":"string","description":"The workspace determines the database schema"},"shard":{"type":"string","description":"The shard identifier (if any)"},"replace":{"type":"boolean","description":"If true and table already exists, data will replace existing data","default":false},"encoding":{"type":"string","description":"File encoding."},"crs":{"type":"string","description":"CRS of the dataset."}},"required":["resource","table","workspace"]}}}},"responses":{"200":{"description":"Ingestion completed.","content":{"application/json":{"schema":{"type":"object","properties":{"schema":{"type":"string","description":"The database schema of the created table.","example":"work_1"},"table":{"type":"string","description":"The name of the created table.","example":"corfu_pois"},"length":{"type":"integer","description":"The number of features stored in the table.","example":539},"type":{"type":"string","description":"The response type as requested.","example":"prompt"}}}}}},"202":{"description":"Accepted for processing, but ingestion has not been completed.","content":{"application/json":{"schema":{"type":"object","properties":{"ticket":{"type":"string","description":"The ticket corresponding to the request.","example":"5d530de91ae5f265329efe38c97ac931"},"status":{"type":"string","description":"The *status* endpoint to poll for the status of the request.","example":"/status/5d530de91ae5f265329efe38c97ac931"},"type":{"type":"string","description":"The response type as requested.","example":"deferred"}}}}},"links":{"GetStatus":{"operationId":"getStatus","parameters":{"ticket":"$response.body#/ticket"},"description":"The `ticket` value returned in the response can be used as the `ticket` parameter in `GET /status/{ticket}`."}}},"400":{"description":"Encountered a validation error","content":{"application/json":{"schema":{"type":"object","properties":{"error":{"type":"string","description":"A error message for the entire request"},"errors":{"type":"object","description":"A map of validation errors keyed on a request parameter","additionalProperties":{"type":"array","items":{"type":"string"}}}},"example":{"errors":{"crs":["Field must be a valid CRS"]}}}}}},"403":{"description":"Insufficient privilege for writing in the database schema."}}},"delete":{"summary":"Drop PostGis table created from a previous ingest operation","description":"Drop PostGis table created from a previous ingest operation","tags":["Ingest"],"parameters":[{"name":"table","in":"query","description":"The table from which the layer originated from (same as layer name)","required":true,"schema":{"type":"string"}},{"name":"workspace","in":"query","description":"The workspace that the layer belongs; if not present, the default workspace will be assumed.","required":true,"schema":{"type":"string"}},{"name":"shard","in":"query","description":"The shard identifier (if any)","required":false,"schema":{"type":"string"}}],"responses":{"204":{"description":"Table dropped (if existed)."},"400":{"description":"Cannot drop table because a layer depends on it"}}}},"/publish":{"post":{"summary":"Publishes a layer to GeoServer from PostGIS table.","tags":["Publish"],"parameters":[{"in":"header","name":"X-Idempotency-Key","schema":{"type":"string","format":"uuid"},"required":false}],"requestBody":{"required":true,"content":{"application/x-www-form-urlencoded":{"schema":{"type":"object","properties":{"table":{"type":"string","description":"The table name."},"workspace":{"type":"string","description":"The workspace in which this layer will be created. The workspace also determines the database schema for the table"},"shard":{"type":"string","description":"The shard identifier (if any)"}},"required":["table","workspace"]}}}},"responses":{"200":{"description":"Publication completed.","content":{"application/json":{"schema":{"type":"object","properties":{"wms":{"type":"string","description":"WMS endpoint"},"wfs":{"type":"string","description":"WFS endpoint"}}}}}},"400":{"description":"Encountered a validation error","content":{"application/json":{"schema":{"type":"object","properties":{"error":{"type":"string","description":"A error message for the entire request"},"errors":{"type":"object","description":"A map of validation errors keyed on a request parameter","additionalProperties":{"type":"array","items":{"type":"string"}}}},"example":{"errors":{"table":["Table name cannot be empty"]}}}}}}}},"delete":{"summary":"Unpublish a GeoServer layer.","description":"Removes both the layer and feature type from GeoServer.","tags":["Publish"],"parameters":[{"name":"table","in":"query","description":"The table from which the layer originated from (same as layer name)","required":true,"schema":{"type":"string"}},{"name":"workspace","in":"query","description":"The workspace that the layer belongs; if not present, the default workspace will be assumed.","required":true,"schema":{"type":"string"}},{"name":"shard","in":"query","description":"The shard identifier (if any)","required":false,"schema":{"type":"string"}}],"responses":{"204":{"description":"Layer unpublished (if existed)."}}}},"/status/{ticket}":{"get":{"summary":"Get the status of a request.","operationId":"getStatus","description":"Returns the status of a request corresponding to a specific ticket.","tags":["Status"],"parameters":[{"name":"ticket","in":"path","description":"The ticket of the request","required":true,"schema":{"type":"string"}}],"responses":{"200":{"description":"Ticket found and status returned.","content":{"application/json":{"schema":{"type":"object","properties":{"completed":{"type":"boolean","description":"Whether ingestion/publication process has been completed or not."},"success":{"type":"boolean","description":"Whether the process completed succesfully."},"comment":{"type":"string","description":"If ingestion/publication has failed, a short comment describing the reason."},"requested":{"type":"string","format":"datetime","description":"The timestamp of the request."},"executionTime":{"type":"integer","description":"The execution time in seconds."}}}}}},"404":{"description":"Ticket not found"},"400":{"description":"The given ticket is either missing or not valid"}}}},"/result/{ticket}":{"get":{"summary":"Get the result of the ingest.","description":"Returns the table in PostGIS resulted from a ingestion request corresponding to a specific ticket.","tags":["Result"],"parameters":[{"name":"ticket","in":"path","description":"The ticket of the request","required":true,"schema":{"type":"string"}}],"responses":{"200":{"description":"The resulted endpoints.","content":{"application/json":{"schema":{"type":"object","properties":{"schema":{"type":"string","description":"The schema of the created table."},"table":{"type":"string","description":"The name of the created table."},"length":{"type":"integer","description":"The number of features stored in the table."}}}}}},"404":{"description":"Ticket not found or ingest has not been completed."},"400":{"description":"The given ticket is either missing or not valid"}}}},"/_health":{"get":{"tags":["Health"],"summary":"Get health status","description":"Get health status","operationId":"getHealth","responses":{"default":{"description":"An object with status information","content":{"application/json":{"schema":{"type":"object","properties":{"status":{"type":"string","description":"A status of 'OK' or 'FAILED'","enum":["OK","FAILED"]},"reason":{"type":"string","description":"the reason of failure (if failed)"},"detail":{"type":"string","description":"more details on this failure (if failed)"}}},"examples":{"example-1":{"status":"OK"}}}}}}}},"/ticket_by_key/{key}":{"get":{"summary":"Returns a request ticket associated with an idempotent key.","tags":["Ticket"],"parameters":[{"name":"key","in":"path","description":"The idempotent key as sent in X-Idempotency-Key header.","required":true,"schema":{"type":"string"}}],"responses":{"200":{"description":"The associated request and ticket.","content":{"application/json":{"schema":{"type":"object","properties":{"ticket":{"type":"string","description":"The associated ticket."},"request":{"type":"string","enum":["ingest","publish"],"description":"The request of this ticket."}}}}}},"404":{"description":"Idempotent key not found."}}}}},"openapi":"3.0.2"}
